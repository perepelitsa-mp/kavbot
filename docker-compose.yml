version: '3.9'

services:
  # Database
  postgres:
    image: ankane/pgvector:latest
    container_name: kavbot-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: kavbot
      POSTGRES_PASSWORD: kavbot_password
      POSTGRES_DB: kavbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kavbot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: kavbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: kavbot-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Ingest Service
  ingest:
    build:
      context: ./services/ingest
      dockerfile: Dockerfile
    container_name: kavbot-ingest
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://kavbot:kavbot_password@postgres:5432/kavbot
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/ingest/src:/app/src

  # NestJS API
  api:
    build:
      context: .
      dockerfile: infra/docker/api.Dockerfile
    container_name: kavbot-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://kavbot:kavbot_password@postgres:5432/kavbot
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      BOT_TOKEN: ${BOT_TOKEN}
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: kavbot
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE: ${OPENAI_API_BASE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: infra/docker/bot.Dockerfile
    container_name: kavbot-bot
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      BOT_TOKEN: ${BOT_TOKEN}
      REDIS_URL: redis://redis:6379
      API_ORIGIN: http://api:3001
      WEBAPP_URL: ${WEBAPP_URL}
      WEBHOOK_URL: ${WEBHOOK_URL}
    depends_on:
      - redis
      - api

  # Next.js Web App
  web:
    build:
      context: .
      dockerfile: infra/docker/web.Dockerfile
    container_name: kavbot-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    depends_on:
      - api

  # BullMQ Workers
  workers:
    build:
      context: .
      dockerfile: infra/docker/workers.Dockerfile
    container_name: kavbot-workers
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://kavbot:kavbot_password@postgres:5432/kavbot
      REDIS_URL: redis://redis:6379
      BOT_TOKEN: ${BOT_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE: ${OPENAI_API_BASE}
      INGEST_SERVICE_URL: http://ingest:8000
    depends_on:
      - redis
      - postgres
      - ingest

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: kavbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - api
      - bot
      - web

volumes:
  postgres_data:
  redis_data:
  minio_data: