- MVP к продакшену пока не готов: есть критические дыры в
  безопасности, отсутствует модерация ключевых потоков, инфраструктура
  не обеспечивает базовых эксплуатационных требований.

  Блокеры

  - apps/api/src/auth/auth.module.ts:13 и apps/api/src/auth/
  jwt.strategy.ts:10 сохраняют небезопасный дефолт JWT_SECRET и
  логируют часть секрета и полезную нагрузку токена; apps/api/src/auth/
  jwt-auth.guard.ts:9 и apps/web/src/lib/api.ts:17 дополнительно шпарят
  access-токены в консоль. Это прямое раскрытие чувствительных данных.
  - apps/api/src/services/services.controller.ts:72 обрабатывает
  POST /services без UseGuards, поэтому любой аноним может
  публиковать объявления; аналогично apps/api/src/listings/
  listings.controller.ts:91 создаёт комментарий от общего «гостя».
  Спам/фрод неминуем.
  - apps/api/src/listings/listings.controller.ts:102 отдаёт пресайнд-
  URL для S3 без авторизации, а apps/api/src/listings/s3.service.ts:25
  логирует конфигурацию. В сочетании с общедоступными кредами (docker-
  compose.yml:13, docker-compose.yml:47) это открывает ведро всем
  желающим.
  - infra/nginx/conf.d/kavbot.conf:15 обслуживает только HTTP,
  сертификатов нет; бэкенд рассчитывает на WSS/WebApp, но Telegram-
  клиент не примет не-HTTPS. Прод с открытым трафиком невозможен.
  - apps/api/src/listings/listings.service.ts:299 и apps/api/src/
  listings/listings.service.ts:391 помечены TODO и пока мгновенно
  публикуют объявления. Без рабочей модерации MVP нарушает собственные
  требования безопасности.

  Дополнительные риски

  - Нет автоматических тестов и наблюдаемости (Swagger/README обещает
  Prometheus и Sentry, но apps/api/src/common/health.controller.ts:24
  и /metrics — заглушки), так что регрессы и деградации не будут
  замечены.
  - Ингест и векторные задачи тяжёлые: модель грузится при
  билде (services/ingest/Dockerfile:16), а services/ingest/src/
  telegram_parser.py хранит Telethon-сессию в контейнере и не
  обрабатывает rate limits; отказоустойчивость отсутствует.
  - todo.txt:1–todo.txt:8 фиксирует массу нерешённых ключевых задач
  (модерация, проверка контента, отчётность, DevOps). Эти пункты
  критичны для эксплуатации.
  - Клиент хранит JWT в localStorage и не обновляет переданные токены;
  при лог-ауте на другом устройстве сессия остаётся активной.
  - Docker-файлы используют latest теги и не закладывают прогрев
  Prisma/миграций; окружение легко уронить простой перезагрузкой.

  Что делать дальше

      1. Закрыть безопасность: обязательные секреты в окружении, убрать
  логи с токенами, обмазать охраной все write-endpoints, включить
  HTTPS.
      2. Довести модерацию и рабочие роли (жёстко включить pending,
  реализовать UI/бот-нотификации), настроить rate limiting/капчу для
  открытых форм.
      3. Обеспечить эксплуатацию: автоматические миграции, health/
  metrics, базовые тесты (хотя бы smoke + happy-path), CI и плейбуки
  деплоя.
      4. Прогреть инфраструктуру для ingest/LLM — отдельные очереди,
  мониторинг, обработка ошибок, стратегии ретраев.

  После устранения этих блокеров и подтверждения тестами можно
  возвращаться к вопросу о запуске.





  Ключевые выводы:

  Критические проблемы:
  - Нет системы избранного → пользователи не возвращаются
  - Нет push-уведомлений → забывают про платформу
  - Нет персонализации → каждый визит как первый
  - Нет статистики для продавцов → не видят результат
  - Отсутствует социальный слой → низкое доверие

  Главная проблема: Нет причин открывать приложение каждый день

  Приоритеты (ICE scoring):
  1. P0 (Must Have): Избранное, уведомления, статистика, история
  просмотров
  2. P1 (Should Have): Профили, рейтинги, локальная лента,
  онбординг
  3. P2 (Could Have): Чат, реферальная программа, справочник города

  Ожидаемый эффект после P0-P1:
  - D7 retention: 15% → 40-50%
  - D30 retention: 5% → 25-30%
  - DAU: 100 → 300-500

  Рекомендация: Не запускать маркетинг до внедрения P0-P1 фич,
  иначе churn > 80%.

  Проект технически готов к продакшену (75/100), но продуктово
  требует доработки базовых механик удержания.
